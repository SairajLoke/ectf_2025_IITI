"""
Author: Ben Janis
Date: 2025

This source file is part of an example system for MITRE's 2025 Embedded System CTF
(eCTF). This code is being provided only for educational purposes for the 2025 MITRE
eCTF competition, and may not meet MITRE standards for quality. Use this code at your
own risk!

Copyright: Copyright (c) 2025 The MITRE Corporation
"""
import os
import argparse
import base64
import os
import struct
import json

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization
from Cryptodome.Cipher import AES
from Cryptodome.Util import Counter
from Crypto.Util.Padding import pad


class Encoder:
    def __init__(self, secrets: bytes):
        """
        You **may not** change the arguments or returns of this function!

        :param secrets: Contents of the secrets file generated by
            ectf25_design.gen_secrets
        """
        # TODO: parse your secrets data here and run any necessary pre-processing to
        #   improve the throughput of Encoder.encode

        # Load the json of the secrets file
        secrets = json.loads(secrets)

        # Load the example secrets for use in Encoder.encode
        # This will be "EXAMPLE" in the reference design"
        self.secrets = secrets

    def aes_encrypt(self, key: bytes, data: bytes) -> bytes:
        iv = os.urandom(32)
        # cipher_ = AES.new(key.encode("utf-8"), AES.MODE_CBC, iv.encode("utf-8"))
        # ctr = Counter.new(256, initial_value=int.from_bytes(iv, byteorder='big'))# Create an AES cipher object in CTR mode
        cipher = AES.new(key, AES.MODE_CBC, iv)
        return base64.b64encode(cipher.encrypt(data))
    
    
    def ecdh(self, encoder_private_key: ec.EllipticCurvePrivateKey, decoder_public_key: ec.EllipticCurvePublicKey, data) -> bytes:
        shared_key = encoder_private_key.exchange(ec.ECDH(), decoder_public_key) #why create it here again and again during the encode fn call?
        return self.aes_encrypt(shared_key, data)
    
    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """The frame encoder function

        This will be called for every frame that needs to be encoded before being
        transmitted by the satellite to all listening TVs

        You **may not** change the arguments or returns of this function!

        :param channel: 16b unsigned channel number. Channel 0 is the emergency
            broadcast that must be decodable by all channels.
        :param frame: Frame to encode. Max frame size is 64 bytes.
        :param timestamp: 64b timestamp to use for encoding. **NOTE**: This value may
            have no relation to the current timestamp, so you should not compare it
            against the current time. The timestamp is guaranteed to strictly
            monotonically increase (always go up) with subsequent calls to encode

        :returns: The encoded frame, which will be sent to the Decoder
        """
        # TODO: encode the satellite frames so that they meet functional and
        #  security requirements
        channels = self.secrets["channels"] # there should be a key for all channels right? 
        root_key = base64.b64decode(self.secrets["root_key"])
        encoder_private_key = serialization.load_pem_private_key(self.secrets["encoder_private_key"].encode("utf-8"), password=None)
        encoder_public_key = serialization.load_pem_public_key(self.secrets["encoder_public_key"].encode("utf-8"))
        decoder_private_key = serialization.load_pem_private_key(self.secrets["decoder_private_key"].encode("utf-8"), password=None)
        decoder_public_key = serialization.load_pem_public_key(self.secrets["decoder_public_key"].encode("utf-8"))
        signature_private_key = serialization.load_pem_private_key(self.secrets["signature_private_key"].encode("utf-8"), password=None)
        signature_public_key = serialization.load_pem_public_key(self.secrets["signature_public_key"].encode("utf-8"))
        subscription_key = base64.b64decode(self.secrets["subscription_key"])
        channel_keys = self.secrets["channel_keys"]
        
        encrypted_frame = self.aes_encrypt(channel_keys[str(channel)], frame)
        encrypted_packet = self.ecdh(encoder_private_key, decoder_public_key, {"channel": channel, "timestamp": timestamp, "frame": encrypted_frame})
        signed_packet = signature_private_key.sign(encrypted_packet, ec.ECDSA(hashes.SHA256()))
        
        return signed_packet + encrypted_frame


def main():
    """A test main to one-shot encode a frame

    This function is only for your convenience and will not be used in the final design.

    After pip-installing, you should be able to call this with:
        python3 -m ectf25_design.encoder path/to/test.secrets 1 "frame to encode" 100
    """
    parser = argparse.ArgumentParser(prog="ectf25_design.encoder")
    parser.add_argument(
        "secrets_file", type=argparse.FileType("rb"), help="Path to the secrets file"
    )
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64b timestamp to use")
    args = parser.parse_args()

    encoder = Encoder(args.secrets_file.read())
    print(repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp)))


if __name__ == "__main__":
    main()
